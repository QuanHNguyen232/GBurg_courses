public class PigSolitaireSolverError {
    int goal;
    int n;
    double epsilon;
    double[][][] p;
    boolean[][][] roll;
    boolean[][][] isComputed;
    
    public PigSolitaireSolverError(int goal, int turns) {
    	this.goal = goal;
    	this.n = turns;
    	this.epsilon = 1e-9;
    	p = new double[goal][n+1][goal];	// score, turn-left, turn-total
        roll = new boolean[goal][n+1][goal];

        valueIterate();
    }

    void valueIterate() {
    	for (int i = 0; i < goal; i++) { // for all i
    		for (int j = 0; j < n; j++) { // for all j
    			for (int k = 0; k < goal - i; k++) { // for all k
    				
    			}
    		}
    	}
    }
    
    public boolean shouldRoll(int i, int j, int k) {
    	return roll[i][j][k];
    }
    public double pWin(int i, int j, int k) {
    	if (j >= n)
    		return 0.0;
    	else if (i + k >= goal)
            return 1.0;
        else if (isComputed[i][j][k])
        	return p[i][j][k];
        else {
        	computeWinProb(i, j, k);
        	return p[i][j][k];
        }
    }
    
    public void computeWinProb(int i, int j, int k) {
    	double pRoll = pWin(i, j+1, 0);
		for (int roll=2; roll<=6; roll++)
			pRoll += pWin(i, j, k + roll);
		pRoll /= 6.0;
		double pHold = pWin(i+k, j+1, 0);
		p[i][j][k] = Math.max(pRoll, pHold);
		roll[i][j][k] = pRoll > pHold;
		isComputed[i][j][k] = true;
	}
    
	public void outputHoldValues() {
        for (int i = 0; i < goal; i++) {
            for (int j = 0; j < n; j++) {
                int k = 0;
                while (k < goal - i && roll[i][j][k])
                    k++;    
                System.out.print(k + " ");
//                System.out.printf("%3d ", k);
            }
            System.out.println();
        }
    }

    public static void main(String[] args){
        new PigSolitaireSolverError(100, 10).outputHoldValues();
    }
}
