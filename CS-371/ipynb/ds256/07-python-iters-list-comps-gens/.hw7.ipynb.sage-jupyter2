{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":63606784},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"e7b8af","input":"for i in range(3):\n    print('Iteration i =', i)","output":{"0":{"name":"stdout","output_type":"stream","text":"Iteration i = 0\nIteration i = 1\nIteration i = 2\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"3992b9","input":"even_or_odd = lambda x: 'even' if x % 2 == 0 else 'odd'\nprint(row)\nprint(list(map(even_or_odd, row)))","output":{"0":{"name":"stdout","output_type":"stream","text":"[1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\n['odd', 'even', 'odd', 'even', 'even', 'even', 'even', 'even', 'odd', 'even', 'odd']\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"baeba1","input":"row = [1]\nfor i in range(32):\n    print(''.join(['#' if x % 2 != 0 else '.' for x in row]))\n    row = next_pascal_row(row)","output":{"0":{"name":"stdout","output_type":"stream","text":"#\n##\n#.#\n####\n#...#\n##..##\n#.#.#.#\n########\n#.......#\n##......##\n#.#.....#.#\n####....####\n#...#...#...#\n##..##..##..##\n#.#.#.#.#.#.#.#\n################\n#...............#\n##..............##\n#.#.............#.#\n####............####\n#...#...........#...#\n##..##..........##..##\n#.#.#.#.........#.#.#.#\n########........########\n#.......#.......#.......#\n##......##......##......##\n#.#.....#.#.....#.#.....#.#\n####....####....####....####\n#...#...#...#...#...#...#...#\n##..##..##..##..##..##..##..##\n#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#\n################################\n"}},"pos":23,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"77aa70","input":"l = [i * i for i in range(10)]\nprint(type(l))\nprint(l)\n\ng = (i * i for i in range(10))\nprint(type(g))\nprint(g)\n\nprint(next(g))\nprint(next(g))\n\n# Generator g saves its state so watch that it resumes providing values in a for loop:\nprint('Starting loop...')\nfor i in g:\n    print(i)\n\n# Now generator is \"used up\", raising a StopIteration exception if one calls next on it explicitly or implicitly (i.e. through use in a for-loop).\n# To iterate through the same values again, one needs to create a new generator:\ng = (i * i for i in range(10))\nprint('Starting loop...')\nfor i in g:\n    print(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'list'>\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n<class 'generator'>\n<generator object <genexpr> at 0x7f6665913820>\n0\n1\nStarting loop...\n4\n9\n16\n25\n36\n49\n64\n81\nStarting loop...\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"cb4090","input":"# Generate Fibonacci sequence values on demand:\ndef fibonacci_gen():\n    current = 0\n    next = 1\n    while True:\n        yield current\n        current, next = (next, current + next)\n\n# Create the generator function object g:\ng = fibonacci_gen()\n\n# Print the first 10 Fibonacci sequence values using g:\nfor i, val in enumerate(g):\n    if i == 10:\n        break\n    print(val)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"764297","input":"# Show that iter() called on a string 'Test' returns a type that a for loop can iterate through:\n\n\n\n# Use a for loop to iterate through a string 'Test' and print each character on a different line:\n\n\n\n# Rewrite your loop as an equivalent while True loop using an iterator as shown above with try-except:\n\n\n\n# Use enumerate() with 'Test' to print successive lines with 'index ___ character ___', e.g. 'index 0 character T':\n\n\n\n# Use zip() with predefined lists 'digits' and 'digit_names' to build a dictionary called 'digit_dict' that maps digits to digit names (e.g. 0 to 'zero'):\ndigits = list(range(10))\ndigit_names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n\n\n\n# Use .item() on 'digit_dict' to read through key-value pairs of 'digit_dict' and build a dictionary called 'digit_name_dict' that does a reverse mapping (e.g. 'zero' to 0):\n\n\n\n# Create a lambda function 'is_digit_name' that returns True if and only if a string is in the keys of 'digit_name_dict'.  Use the 'in' operator to check for membership in digit_name_dict.keys():\nwords = 'cat one dog bird seven three fish two five snek'.split()\n\n\n\n# Use filter() with your filter function 'is_digit_name()' to create a list of digit name words to iterate through in a for loop.  Within the for loop, use the previous 'digit_name_dict' to print each corresponding digit on separate lines:\n\n\n\n# Create a lambda function 'poly' that takes value x and returns x^2 + 2*x + 1.  Use map of on the list of x-values below in a for loop to print successive output values on separate lines:\nimport numpy as np\nx = list(np.linspace(0.0, 1.0, 3))\nprint('x values:', x)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"<str_iterator object at 0x7f6665918a60>\nT\ne\ns\nt\nT\ne\ns\nt\nindex 0 character T\nindex 1 character e\nindex 2 character s\nindex 3 character t\n{0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n{'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n1\n7\n3\n2\n5\nx values: [0.0, 0.5, 1.0]\n1.0\n2.25\n4.0\n"}},"pos":30,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"542b35","input":"# Create a lambda function 'my_abs' that computes the absolute value of the numeric input without using the 'abs' function.  Hint: Use an if-else expression.\n\n\n\n# This demonstrates how one can use map to take a list of numbers and return a new list with their absolute values:\nl = [3, -1, 4, 1, -5, 9, -2, -6]\nl_abs = list(map(my_abs, l))\nprint(l_abs)\n\n# Now create and print an equivalent l_abs list using a list comprehension\n\n\n\n# Now use a more complex single list comprehension that takes list 'l' and creates and prints a list of absolute values from the list that are odd:\n\n\n\n# Create and print a _set_ of the same values computed similarly directly from list 'l' using a set comprehension:\n\n\n\n# Create and print a dictionary mapping the values of l to their cubes using a dictionary comprehension.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[3, 1, 4, 1, 5, 9, 2, 6]\n[3, 1, 4, 1, 5, 9, 2, 6]\n[3, 1, 1, 5, 9]\n{1, 3, 5, 9}\n{3: 27, -1: -1, 4: 64, 1: 1, -5: -125, 9: 729, -2: -8, -6: -216}\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c11544","input":"# Here's a list comprehension that returns individual characters of a string 'Test'\nchars = [ch for ch in 'Test']\nchar_iterator = iter(chars)\nprint(next(char_iterator))\nprint(next(char_iterator))\n\n# A generator, by contrast, uses the same effective instructions, but doesn't create a list of all of the values, providing an iterator that produces values on demand.  Do the same as above, but with a generator char_gen instead of a list comprehension:\n\n\n\n# Create a \"triangular numbers\"(https://en.wikipedia.org/wiki/Triangular_number) generator function 'triangular_gen' that first returns 0, then 0 + 1, then 0 + 1 + 2, etc., without limit by yielding an internal sum while incrementing the value that is successively added to that sum. Print the first 10 values generated by triangular_gen:\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"T\ne\nT\ne\n0\n1\n3\n6\n10\n15\n21\n28\n36\n45\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"76c1b9","input":"","output":{"0":{"name":"stdout","output_type":"stream","text":"[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n[-1331, -1000, -729, -512, -343, -216, -125, -64, -27, -8, -1, 0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n{-10: -1331, -9: -1000, -8: -729, -7: -512, -6: -343, -5: -216, -4: -125, -3: -64, -2: -27, -1: -8, 0: -1, 1: 0, 2: 1, 3: 8, 4: 27, 5: 64, 6: 125, 7: 216, 8: 343, 9: 512, 10: 729}\n-10 --> -1331\n-9 --> -1000\n-8 --> -729\n-7 --> -512\n-6 --> -343\n-5 --> -216\n-4 --> -125\n-3 --> -64\n-2 --> -27\n-1 --> -8\n0 --> -1\n1 --> 0\n2 --> 1\n3 --> 8\n4 --> 27\n5 --> 64\n6 --> 125\n7 --> 216\n8 --> 343\n9 --> 512\n10 --> 729\n"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"ebf175","input":"","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n1\n2\n6\n24\n120\n720\n5040\n40320\n362880\n"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"abd8f2","input":"from collections.abc import Iterable\nprint(isinstance(range(3), Iterable))","output":{"0":{"name":"stdout","output_type":"stream","text":"True\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"608bbe","input":"my_iterator = iter(range(3))  # The for loop calls iter() on an Iterable to get at the iterator interface that allows us to call next() on it.\nprint(type(my_iterator))   # type of range iterator\nprint(next(my_iterator))   # Iteration value 0\nprint(next(my_iterator))   # Iteration value 1\nprint(next(my_iterator))   # Iteration value 2\ntry:\n    print(next(my_iterator))\nexcept:\n    print('No more iterations!')","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'range_iterator'>\n0\n1\n2\nNo more iterations!\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"3cdb57","input":"l = ['A', 'B', 'C']\n\n# So this loop ...\nfor ch in l:\n    print(ch)\n\n# ... works roughly like this:\niterator = iter(l)\nwhile True:\n    try:\n        ch = next(iterator)\n    except:\n        break\n    print(ch)","output":{"0":{"name":"stdout","output_type":"stream","text":"A\nB\nC\nA\nB\nC\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8890cc","input":"# enumerate() returns tuple pairs of index and the Iterable values:\n\nfor i, val in enumerate(l):\n    print('index', i, 'has value', val)\n\n# zip() can take two or more parallel lists and allow us to iterate through parallel values:\n\nl_phonetic = ['Alfa', 'Bravo', 'Charlie']\nphonetic_dict = {}\nfor letter, phonetic in zip(l, l_phonetic):\n    print('In the NATO phonetic alphabet, letter \"{}\" is spoken as \"{}\".'.format(letter, phonetic))\n    phonetic_dict[letter] = phonetic\nprint('Note the dictionary we built using zip():', phonetic_dict)\n\n# Calling .item() on dictionaries returns an iterator that provides key-value pair tuples:\n\nfor letter, phonetic in phonetic_dict.items():\n    print('In the NATO phonetic alphabet, letter \"{}\" is spoken as \"{}\".'.format(letter, phonetic))\n\n# map() takes a function and an Iterable and returns an Iterable that provides function outputs for each of the source Iterable values:\n\ntwo_to_the = lambda x: 2 ** x\nfor val in map(two_to_the, range(4)):\n    print(val)\n\n# filter() takes a Boolean filter function and an Iterable and returns an Iterable that provides onto those source Iterable values that return True from the filter function:\n\nr_in_word = lambda word: 'r' in word\nfor word in filter(r_in_word, l_phonetic):\n    print(word, 'has a the letter \"r\".')","output":{"0":{"name":"stdout","output_type":"stream","text":"index 0 has value A\nindex 1 has value B\nindex 2 has value C\nIn the NATO phonetic alphabet, letter \"A\" is spoken as \"Alfa\".\nIn the NATO phonetic alphabet, letter \"B\" is spoken as \"Bravo\".\nIn the NATO phonetic alphabet, letter \"C\" is spoken as \"Charlie\".\nNote the dictionary we built using zip(): {'A': 'Alfa', 'B': 'Bravo', 'C': 'Charlie'}\nIn the NATO phonetic alphabet, letter \"A\" is spoken as \"Alfa\".\nIn the NATO phonetic alphabet, letter \"B\" is spoken as \"Bravo\".\nIn the NATO phonetic alphabet, letter \"C\" is spoken as \"Charlie\".\n1\n2\n4\n8\nBravo has a the letter \"r\".\nCharlie has a the letter \"r\".\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"f75753","input":"l = list(range(5))\nprint(l)\nl = [i for i in range(5)]\nprint(l)  # equivalent result from list comprehension\n\nl2 = list(map(lambda x: x * x, l))\nprint(l2)\nl2 = [i * i for i in l]\nprint(l2)  # equivalent result from list comprehension\n\nis_even = lambda i: i % 2 == 0\nl3 = list(filter(is_even, l2))\nprint(l3)\nl3 = [i for i in l2 if is_even(i)]\nprint(l3)  # equivalent result from list comprehension\nl3 = [i * i for i in range(5) if is_even(i * i)]\nprint(l3)  # equivalent result from list comprehension\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[0, 1, 2, 3, 4]\n[0, 1, 2, 3, 4]\n[0, 1, 4, 9, 16]\n[0, 1, 4, 9, 16]\n[0, 4, 16]\n[0, 4, 16]\n[0, 4, 16]\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"3b8fb1","input":"l1 = ['A', 'B', 'C']\nl2 = [1, 2, 3]\nprint([(ch, i) for ch in l1 for i in l2])","output":{"0":{"name":"stdout","output_type":"stream","text":"[('A', 1), ('A', 2), ('A', 3), ('B', 1), ('B', 2), ('B', 3), ('C', 1), ('C', 2), ('C', 3)]\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"13cb77","input":"squares = {i * i for i in range(10)}\nprint(squares)  # recall that sets are unordered\n\nsquares_dict = {i: i * i for i in range(10)}\nprint(squares_dict)","output":{"0":{"name":"stdout","output_type":"stream","text":"{0, 1, 64, 4, 36, 9, 16, 49, 81, 25}\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"b26339","input":"def next_pascal_row(row):\n    return [i + j for i, j in zip([0] + row, row + [0])]\n\nrow = [1]\nfor i in range(10):\n    print(row)\n    row = next_pascal_row(row)","output":{"0":{"name":"stdout","output_type":"stream","text":"[1]\n[1, 1]\n[1, 2, 1]\n[1, 3, 3, 1]\n[1, 4, 6, 4, 1]\n[1, 5, 10, 10, 5, 1]\n[1, 6, 15, 20, 15, 6, 1]\n[1, 7, 21, 35, 35, 21, 7, 1]\n[1, 8, 28, 56, 70, 56, 28, 8, 1]\n[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n"}},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"013c06","input":"As you can see, a list comprehension often has the form ```[``` _list-value_ ```for``` _loop-control-variable_ ```in``` _Iterable_ ```if``` _filter-condition_ ```]```.\n\nWe can add additional ```for``` clauses for multiple iteration:","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"0489de","input":"The surrounding square braces indicate that we're creating a list, but we can also create sets and dictionaries this way as well using curly brace and key-value-pair colon syntax:","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"09402b","input":"# Homework","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"097b0f","input":"In the reading assignments listed above, take special note of the many useful iterators that exist in Python.  Here are brief examples more fully explained in our readings:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"0b3956","input":"## Generators\n\nPerform the following iterators exercises together:","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"29d8a6","input":"An _iterator_ is a Python object that serves up successive value through a ```next()``` function.  It is the basis for how a ```for``` `____` ```in``` `____:` loop works.  Consider the iterator ```range(3)``` in the loop below.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"2e9f41","input":"## Python List Comprehensions\n\nA list comprehension is an expression that creates a new list in place with a syntax similar to a simple ```for ____ in ____``` loop.  Observe the equivalence of the following list results to induce how the list comprehension works.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"3235c0","input":"A generator is helpful to save memory by producing values as needed, but if one wants to iterate through the values of a sequence many times and only generate them once, a list is better to use.  This is an example of a common time-versus-memory tradeoff in computing.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"485737","input":"## Python Iterators","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"652c36","input":"# In Class\n\n## Iterators\n\nPerform the following iterator exercises together:","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"67e9f6","input":"We can also create _generator functions_ that continually ```yield``` return values on demand when we call them:","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"899ae6","input":"(2) Do the following:\n* Use a list comprehension to create and print a list ```xs``` of the integers from -10 to 10.\n* Use a list comprehension to create and print a list ```ys``` that contains $y = x^3 - 3 * x^2 + 3 * x - 1$ for each corresponding value $x$ of ```xs```.\n* Use a dictionary comprehension to create and print a dictionary ```f``` that associates $x$ values to their respective $y$ values using lists ```xs``` and ```ys``` and the ```zip()``` function.\n* Use the ```items()``` function on ```f``` in a for loop that prints out lines of the form _x-value_ ```-->``` _y-value_ for each _x-value_ key and _y-value_ value of a key-value pair.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"8a256b","input":"# Python Iterators, List Comprehensions, and Generators\n\nLearning Objectives:\n* Students will learn basics of Python iterators.\n* Students will learn basics of Python list comprehensions.\n* Students will learn basics of Python generators.\n\nReadings before class:\n\n* Jake VanderPlas.  [A Whirlwind Tour of Python](https://github.com/jakevdp/WhirlwindTourOfPython) sections:\n  * [10 - Iterators](https://github.com/jakevdp/WhirlwindTourOfPython/blob/master/10-Iterators.ipynb)\n  * [11 - List Comprehensions](https://github.com/jakevdp/WhirlwindTourOfPython/blob/master/11-List-Comprehensions.ipynb)\n  * [12 - Generators](https://github.com/jakevdp/WhirlwindTourOfPython/blob/master/12-Generators.ipynb)\n* Allen B. Downey.  [Think Python 2e](https://greenteapress.com/wp/think-python-2e/):\n  * [Iterator examples in sections 12.5 and 12.6](http://greenteapress.com/thinkpython2/html/thinkpython2013.html#sec145) _Focus on the mentions of practical iterator examples from ```zip``` that iterates through parallel sequences, to dictionary ```items``` that allows you to iterate through key-value pairs._\n  * [Sections 19.3-19.3  List Comprehensions and Generator Expressions](http://greenteapress.com/thinkpython2/html/thinkpython2020.html#sec224)\n\nActivities before class:\n* Read below up to (but not including) the section marked Homework.  You are encouraged to add code blocks and play with the forms to gain understanding and comfort with them.\n\nIn class:\n* We will work together in class on the section labeled \"In Class\"\n\nHomework after class:\n* Complete the section labeled \"Homework\" below before the next class when it will be collected.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"8ae2fc","input":"(3) Create a generator function `factorial_gen` that indefinitely generates factorial values $0!, 1!, 2!, 3!, \\ldots$ on demand.  Create a loop that prints out the first 10 values generated on separate lines.  Only one multiplication and one addition should occur per value generated.","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"94aa6c","input":"## List Comprehensions\n\nPerform the following list comprehension exercises together:","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"950f5b","input":"And if we wanted to get at the ```next``` function to request individual next items as we wish?  We call function ```iter()``` on an iterator. ","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"abdef8","input":"How can we tell if something is an iterator?  In Python, it is an _instance_ of a general superset of many object types called ```collections.Iterable```.  If we wanted to test whether something could come after the ```in``` in our ```for``` loop, we could check this way:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"ad3c2d","input":"(1) Complete any in-class exercises you did not complete in class.","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"c0cb62","input":"So behind the scenes, the ```for i in range(3):``` does the following:\n1. Calls ```iter(range(3))``` to get the ```Iterable``` object's iterator interface\n2. Assigns i to ```next()``` called on that iterator\n3. Executes the code block after the colon\n4. Repeats steps 2 and 3 until ```next()``` causes a ```StopIteration``` exception and exits the underlying loop\n\nThus, when we iterate through a list object with ```for```, we find that a list is an ```Iterable``` and can supply an iterator to offer up successive values:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"c22cb9","input":"(end of homework)","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"d0c851","input":"The ```next_pascal_row(row)``` function creates the next [Pascal's Triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle) row from the previous row.  Look what happens when we make string characters from each row based on whether the values or odd or even?   Have you seen this pattern before?","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"d66d89","input":"Now for a bit of mathematical fun for an additional example of list comprehensions.  See if you can follow what's going on given that the '+' operator concatenates two lists.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f2c3ce","input":"## Python Generators\n\nA _generator_ looks like a list comprehension, but with an important difference: a generator is an iterator that doesn't create a list of values, but provides them on demand through the ```next()``` function.  Observe the difference:","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"fb31bc","input":"The if-else expression in Python has a syntax _true-case-expression_ ```if``` _condition_ ```else``` _false-case-expression_.  This expression evaluates to the  _true-case-expression_ if the _condition_ is ```True``` or else it evaluates to the _false-case-expression_.","pos":20,"type":"cell"}
{"id":0,"time":1599228175602,"type":"user"}
{"last_load":1599192802001,"type":"file"}