{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":82161664},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"b247c5","input":"# Place your imports here.\n\nimport numpy as np\nimport pandas as pd\nnp.random.seed(0)  # seed for reproducibility\n","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"e4ff28","input":"# Create and print numpy ndarray of 15 floating-point ones.\n\n\n\n# Create and print an array of 10 values evenly spaced between -5 and 5\n\n\n\n# Create and print a 3-by-11 array of random integers in from -1 to 1 inclusive.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n[-5.         -3.88888889 -2.77777778 -1.66666667 -0.55555556  0.55555556\n  1.66666667  2.77777778  3.88888889  5.        ]\n[[ 1 -1  0  0  1 -1  0  0  0 -1  1]\n [-1  1  1 -1  1 -1 -1 -1  0  0  1]\n [-1 -1  0 -1  0  1  1 -1  0  0  0]]\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"e48c9f","input":"# Create and print a 4-by-4 numpy array with values 1 through 16 left-to-right, top-to-bottom.\n\n\n\n# Change the entry in the second row and third column to be 20.  Print the array.\n\n\n\n# Use negative indexing to set the entry in the second to last row and second to last column to be 0.  Print the array.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n[[ 1  2  3  4]\n [ 5  6 20  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n[[ 1  2  3  4]\n [ 5  6 20  8]\n [ 9 10  0 12]\n [13 14 15 16]]\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"cc14c1","input":"# Create and print an array with integer values 0 through 9 using function arange.\n\n\n\n# Use array slicing to slice subrange indices 5 through 7 inclusive and print the slice.\n\n\n\n# Use array slicing to slice all even index values and print the slice.\n\n\n\n# Use a negative step with slicing to print the array reversed.  Omit any slicing values that you can.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[0 1 2 3 4 5 6 7 8 9]\n[5 6 7]\n[0 2 4 6 8]\n[9 8 7 6 5 4 3 2 1 0]\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"3f62af","input":"a = np.arange(1, 17).reshape((4, 4))\nprint(a)\n\n# Reshape array 'a' to have 2 rows and 8 columns.  Print the result.\n\n\n\n# Create a copy 'c' of the first row of reshaped 'a' and reshape it to be a single column.  Print the result.\n\n\n\n# Do the same with copy 'c2', but using newaxis instead of reshape.\n\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n[[ 1  2  3  4  5  6  7  8]\n [ 9 10 11 12 13 14 15 16]]\n[[1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7]\n [8]]\n[[1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7]\n [8]]\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"646877","input":"a = np.arange(1, 4)\nprint(a)\n\n# Print the array of array 'a' value reciprocals.\n\n\n\n# Print the array formed by adding array 'a' to itself.\n\n\n\n# Print the array of 5 to the power of each value of 'a'.\n\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[1 2 3]\n[1.         0.5        0.33333333]\n[2 4 6]\n[  5  25 125]\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"937218","input":"np.random.seed(0)\na = np.arange(0,16)\nnp.random.shuffle(a)\na = a.reshape((4, 4))\nprint(a)\n\n# Use aggregation to print the maximum value of 'a', the maximum values of each row, and the maximum values of each column.\n\n\n\n# Use aggregation to print the row-based index of the minimum value of 'a'.  The row-based index is the index if we reshaped the array into a single row.\n\n\n\n# Use aggregation to print the mean of the values of 'a'.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 1  6  8  9]\n [13  4  2 14]\n [10  7 15 11]\n [ 3  0  5 12]]\n15\n[ 9 14 15 12]\n[13  7 15 14]\n13\n7.5\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"44be0d","input":"l = [1, 2, 3]\n\n# Convert Python list l as directly as possible to a pandas Dataframe df.  Print the result and the type.\n\n\n\n# Convert pandas Dataframe df as directly as possible to a Python list.  Print the result and the type.\n\n","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"0835f0","input":"# Create and print a 4 row, 2 column numpy array filled with the integer value 42.\n\n\n\n# Create a 5-by-5 array of uniform random numbers in the range [0, 1).\n\n\n\n# Create and print a 5-by-5 identity matrix.\n\n","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"8f4fd1","input":"a = np.arange(1, 17).reshape((4, 4))\nprint(a)\n\n# Use array slicing to print the slice of array 'a' with values:\n#[[ 6  7]\n# [10 11]]\n\n\n\n# Use array slicing to print the slice of array 'a' with values:\n#[[ 5  7]\n# [13 15]]\n\n\n\n# Combine indexing and slicing to print the second row of array 'a':\n\n\n\n# Combine indexing and slicing to print the third column of array 'a':\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"a3b218","input":"a = np.arange(1, 17).reshape((4, 4))\nprint(a)\n\n# Print the horizontal (row) concatenation of 'a' with 'a'.\n\n\n\n# Print the vertical (column) concatenation of 'a' with 'a'.\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"9e4d61","input":"print('Python list')\n# Python list\nl = [1, 2, 3]\nprint(l, type(l))\n\nprint('--> numpy ndarray')\n# Python list to numpy ndarray\na = np.asarray(l)\nprint(a, type(a))\n\nprint('--> pandas Series')\n# numpy ndarray to pandas Series\ns = pd.Series(a)\nprint(s, type(s))\n\nprint('--> pandas DataFrame')\n# pandas Series to pandas DataFrame\ndf = pd.DataFrame(s)\nprint(df, type(df))\n\nprint('--> pandas Series')\n# pandas DataFrame to pandas Series\ns = df[0]\nprint(s, type(s))\n\nprint('--> numpy ndarray')\n# pandas Series to numpy ndarray\na = np.asarray(s)\nprint(a, type(a))\n\nprint('--> Python list')\n# numpy ndarray to Python list\nl = a.tolist()\nprint(l, type(l))","output":{"0":{"name":"stdout","output_type":"stream","text":"Python list\n[1, 2, 3] <class 'list'>\n--> numpy ndarray\n[1 2 3] <class 'numpy.ndarray'>\n--> pandas Series\n0    1\n1    2\n2    3\ndtype: int64 <class 'pandas.core.series.Series'>\n--> pandas DataFrame\n   0\n0  1\n1  2\n2  3 <class 'pandas.core.frame.DataFrame'>\n--> pandas Series\n0    1\n1    2\n2    3\nName: 0, dtype: int64 <class 'pandas.core.series.Series'>\n--> numpy ndarray\n[1 2 3] <class 'numpy.ndarray'>\n--> Python list\n[1, 2, 3] <class 'list'>\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"aca957","input":"a = np.arange(-0.5, 0.5, .25)\nprint(a)\n\n# Print the array with absolute values of 'a' values.\n\n\n# Print the array with the cosines of 'a' values.\n\n\n# Print the array with the inverse tangents of 'a' values.\n\n\n# Print the array with 10 raised to the powers of 'a' values.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[-0.5  -0.25  0.    0.25]\n"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"30c26c","input":"a = np.arange(1, 10)\nprint(a)\n\n# Use broadcasting with 'a' and a column vector of 'a' to print the entries of a multiplication table with 9 rows and 9 columns showing products 1*1 (upper-left) through 9*9 (lower-right).\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[1 2 3 4 5 6 7 8 9]\n"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"1ec552","input":"l = [1, 2, 3]\n\n# Convert Python list l as directly as possible to a pandas Series s.\n\n\n\n# Convert pandas Series s as directly as possible to a Python list.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"0    1\n1    2\n2    3\ndtype: int64 <class 'pandas.core.series.Series'>\n[1, 2, 3] <class 'list'>\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"e699c3","input":"# Create and print numpy ndarray of 20 integer zeros.\n\n\n\n# Create and print an array filled with -24, -21, -18, ..., 18, 21, 24.\n\n\n\n# Create and print a 4-by-4 array of normally distributed random values with mean 10 and standard deviation 5.\n\n\n\n# Create and print an uninitialized array of 20 integers.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[-24 -21 -18 -15 -12  -9  -6  -3   0   3   6   9  12  15  18  21  24]\n[[18.82026173 12.00078604 14.89368992 21.204466  ]\n [19.33778995  5.1136106  14.75044209  9.24321396]\n [ 9.48390574 12.05299251 10.72021786 17.27136753]\n [13.80518863 10.60837508 12.21931616 11.66837164]]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"}},"pos":7,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"c339d5","input":"# Create and print a 2-by-3-by-4 array filled with 1.23.\n\n\n\n# Use members of that array to print the number of dimensions, shape (size of each dimension), size (total count of values), and type.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":" x ndim: 3\nx shape: (2, 3, 4)\n x size: 24\nx dtype: float64\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d391a9","input":"a = np.arange(1, 17).reshape((4, 4))\nprint(a)\n\n# Create a copy 'c' of a view of the middle two columns of array 'c'.\n\n\n\n# Assign the first row, first column of 'c' to value 42.  Print 'c' and 'a' to show that the change to copy 'c' didn't affect original 'a'.\n\n\n\n# Create a non-copy 'nc' of a view of the middle two rows of array 'a'.\n\n\n\n# Use negative indexing to assign the last row and column of 'nc' to 0.  Print 'nc' and 'a' to show that the change to no-copy slice 'nc' affected original 'a'.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n[[42  3]\n [ 6  7]\n [10 11]\n [14 15]]\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n[[ 5  6  7  8]\n [ 9 10 11  0]]\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11  0]\n [13 14 15 16]]\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d83af7","input":"a = np.arange(0, 10)\nprint(a)\na2 = np.arange(1, 17).reshape((4, 4))\nprint(a2)\n\n# Assign arrays 'b', 'c', and 'd' to be a split of 'a' at indices 3 and 7.  Print 'b', 'c', and 'd'.\n\n\n\n# Print the result of splitting a2 into its first column and last three columns.\n\n\n\n# Print the result of splitting a2 into its first three rows and its last row.\n\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[0 1 2 3 4 5 6 7 8 9]\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]\n [13 14 15 16]]\n[0 1 2] [3 4 5 6] [7 8 9]\n[[ 1]\n [ 5]\n [ 9]\n [13]]\n[[ 2  3  4]\n [ 6  7  8]\n [10 11 12]\n [14 15 16]]\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n[[13 14 15 16]]\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"534269","input":"a = np.array([32, 8, 2])\n\n# Use numpy aggregation to print the sum of the values of 'a'.\n\n\n# Use numpy aggregation to print the accumulated values that were partial sums on the way to the previous result ([32 40 42]).\n\n\n# Use numpy aggregation to print the product of the values of 'a'.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"42\n[32 40 42]\n512\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"712698","input":"a = np.array([1, 2, 3])\n\n# Convert numpy ndarray a as directly as possible to a pandas Dataframe df.  Print the result and the type.\n\n\n\n# Convert pandas Dataframe df as directly as possible to a numpy ndarray a.  Print the result and the type.\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"   0\n0  1\n1  2\n2  3 <class 'pandas.core.frame.DataFrame'>\n[1 2 3] <class 'numpy.ndarray'>\n"}},"pos":17,"scrolled":true,"type":"cell"}
{"cell_type":"markdown","id":"0a75e7","input":"# In Class\n\nFirst, check your pre-class work above with each other.\n\nThen, work together to complete the following exercises.\n\nLook up and perform the following additional conversions.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"242e42","input":"### Array Splitting\n\n**To-Do:**","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"3edda0","input":"(2) Creating Arrays from Scratch","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"4efa7f","input":"### Reshaping Arrays","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"599f0f","input":"### Creating Arrays from Scratch","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"6b6cdb","input":"### Creating Arrays from Scratch\n\n**To-Do: Initialize the following numpy arrays in the simplest way possible and print the result to verify correctness.**","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"778522","input":"### Numpy Array Attributes\n\n**To-Do:**","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"7cc5cc","input":"### UFuncs: Universal Functions\n\nFor each of the following, apply universal functions to perform operations efficiently.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"854014","input":"(4) Array concatenation","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"885426","input":"# Homework\n\n(0) Complete the in-class exercises.  (This may be done with others beyond your assigned pairs.)\n\n(1) Look up and perform the following additional conversions.","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"90f70c","input":"### Aggregation\n\n**To-Do:**","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"95848b","input":"# Numpy\n\nLearning Objectives:\n* Students will gain understanding of the motivation for numpy ndarray objects as a computationally efficient alternative to Python lists.\n* Students will practice basic indexing, slicing, concatenating, and splitting operations on numpy ndarrays.\n* Students will practice basic application of universal functions, aggregation functions, and broadcasting on ndarray broadcasting.\n\nReadings before class:\n\n* Jake VanderPlas.  [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/):\n  * [Chapter 2 - Introduction to Numpy through section \"Computation on Arrays: Broadcasting\"](https://jakevdp.github.io/PythonDataScienceHandbook/) _If you have time to read further, you'll benefit from seeing some of the masking and sorting computation examples that follow.  In this course, we will primarily use pandas DataFrame objects for computations on data._\n\nBefore class:\n* Perform the **To-Do** tasks below as you do the reading.  You are encouraged to add code blocks and play with the forms to gain understanding and comfort with them.\n\nIn class:\n* We will work together on the exercises in section \"In Class\".\n\nHomework after class:\n* Complete the section labeled \"Homework\" below before the next class when it will be collected.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"9684a3","input":"### Numpy Aggregation Functions\n\nFor each of the following, apply Numpy's fast built-in aggregation functions.","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"9b5f78","input":"### Array Indexing: Accessing Single Elements","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"a290a7","input":"### No-copy and copy views\n\n**To-Do:**","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"d67be7","input":"## Motivations\n\nOne thing you may have noticed is that there are a number of ways to represent a sequence of numbers:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"d72705","input":"### Array slicing: One-dimensional subarrays","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"e58c20","input":"(end of homework)","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"e65aea","input":"In this chapter and the next of VanderPlas' text, we will come to a better understanding of why there is a distinctive benefit to having these forms.  The short answer is that Python list versatility trades off computational efficiency.  The numpy library gives us higher performance multidimensional arrays with efficient operations over homogenous data.  Pandas builds on top of numpy ndarrays to provide support for tabular data and versatile table operations.  Here we summarize the motivation for numpy.\n\nPython is a dynamically typed language, meaning that the type of a variable is determined dynamically according to what value is currently assigned to it.  This means that each value is a reference to an object that contains not only the data, but the data type, size, number of variables that reference it (the \"reference count\", so that the memory can be reclaimed or \"garbage collected\" when the count goes to zero), all in addition to the data itself!  This makes iterative operations through lists much slower than in other languages like C, C++ and Java.\n\nNumpy allows a programmer to create an array of a single type of data so that there is informational overhead only for the list itself, and data is stored as a list of just the data itself.  A picture of this different is provided by VanderPlas:\n\n![ndarray versus Python list](https://jakevdp.github.io/PythonDataScienceHandbook/figures/array_vs_list.png)\n\nMuch of the reading is how to perform various tasks.  The best way to learn is through practiced application.  Before class, in class, and after class in homework, you will exercise the core skills of the reading.  First, however, are questions best answered by well-formed web search queries.\n\n**To-Do: Look up and perform the following additional conversions.**","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"f11774","input":"(3) Array slicing: Multidimensional Arrays","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"ff7bc2","input":"(6) Broadcasting\n\nUse broadcasting to perform the following operation:","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"ff7d9e","input":"(5) UFuncs: Universal Functions\n\nFor each of the following, apply universal functions to perform operations efficiently.","pos":38,"type":"cell"}
{"id":0,"time":1602231353562,"type":"user"}
{"last_load":1601610204898,"type":"file"}