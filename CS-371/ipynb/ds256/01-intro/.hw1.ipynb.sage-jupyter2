{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":134344704},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1598011796287,"exec_count":1,"id":"4870a2","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression","kernel":"python3","no_halt":true,"pos":2,"start":1598011791488,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011796811,"exec_count":2,"id":"b3138b","input":"# This is a comment.  In Python, anything from a \"#\" to the end of the line is ignored.\n\n# On the next line, we define the data path variable \"data_path\", a string of character that indicates where we'll look to find our data.\ndata_path = 'http://cs.gettysburg.edu/~tneller/ds256/data/slr/'\n\n# Next, we'll being a complete specification of where our file is and which file, by _concatenating_ the characters of the data_path with those of the specific data file:\nuri = data_path + 'data.csv'  # Note: URI stands for Uniform Resource \n\n# Next, we'll define a variable \"df\" (short for \"dataframe\"), that will hold a pandas dataframe read from that filename \ndf = pd.read_csv(uri)","kernel":"python3","no_halt":true,"pos":4,"start":1598011796309,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011796894,"exec_count":3,"id":"62c957","input":"df.sample(5)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>x1</th>\n      <th>x2</th>\n      <th>x3</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3098</th>\n      <td>3098</td>\n      <td>0.459544</td>\n      <td>0.098988</td>\n      <td>0.093569</td>\n      <td>364.578732</td>\n    </tr>\n    <tr>\n      <th>3791</th>\n      <td>3791</td>\n      <td>0.066341</td>\n      <td>0.529207</td>\n      <td>-0.236591</td>\n      <td>-224.090264</td>\n    </tr>\n    <tr>\n      <th>6638</th>\n      <td>6638</td>\n      <td>0.039657</td>\n      <td>0.316525</td>\n      <td>0.002685</td>\n      <td>37.654351</td>\n    </tr>\n    <tr>\n      <th>7686</th>\n      <td>7686</td>\n      <td>-0.290362</td>\n      <td>-0.540082</td>\n      <td>-0.017334</td>\n      <td>76.005569</td>\n    </tr>\n    <tr>\n      <th>2233</th>\n      <td>2233</td>\n      <td>-0.299078</td>\n      <td>-0.336872</td>\n      <td>0.083295</td>\n      <td>139.794663</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        id        x1        x2        x3           y\n3098  3098  0.459544  0.098988  0.093569  364.578732\n3791  3791  0.066341  0.529207 -0.236591 -224.090264\n6638  6638  0.039657  0.316525  0.002685   37.654351\n7686  7686 -0.290362 -0.540082 -0.017334   76.005569\n2233  2233 -0.299078 -0.336872  0.083295  139.794663"},"exec_count":3}},"pos":6,"start":1598011796828,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011797057,"exec_count":4,"id":"6acc3f","input":"df.describe()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>x1</th>\n      <th>x2</th>\n      <th>x3</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>10000.00000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4999.50000</td>\n      <td>0.008262</td>\n      <td>-0.001218</td>\n      <td>0.002498</td>\n      <td>73.643143</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2886.89568</td>\n      <td>0.306866</td>\n      <td>0.306426</td>\n      <td>0.307042</td>\n      <td>258.857934</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.00000</td>\n      <td>-0.741608</td>\n      <td>-0.799235</td>\n      <td>-0.777593</td>\n      <td>-394.015877</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2499.75000</td>\n      <td>-0.244056</td>\n      <td>-0.253918</td>\n      <td>-0.248610</td>\n      <td>-151.264042</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4999.50000</td>\n      <td>0.013338</td>\n      <td>0.000150</td>\n      <td>0.006883</td>\n      <td>77.530054</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7499.25000</td>\n      <td>0.259365</td>\n      <td>0.252016</td>\n      <td>0.254278</td>\n      <td>298.776930</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9999.00000</td>\n      <td>0.799406</td>\n      <td>0.766355</td>\n      <td>0.780436</td>\n      <td>534.482892</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                id            x1            x2            x3             y\ncount  10000.00000  10000.000000  10000.000000  10000.000000  10000.000000\nmean    4999.50000      0.008262     -0.001218      0.002498     73.643143\nstd     2886.89568      0.306866      0.306426      0.307042    258.857934\nmin        0.00000     -0.741608     -0.799235     -0.777593   -394.015877\n25%     2499.75000     -0.244056     -0.253918     -0.248610   -151.264042\n50%     4999.50000      0.013338      0.000150      0.006883     77.530054\n75%     7499.25000      0.259365      0.252016      0.254278    298.776930\nmax     9999.00000      0.799406      0.766355      0.780436    534.482892"},"exec_count":4}},"pos":8,"start":1598011796922,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011799231,"exec_count":5,"id":"6a74d6","input":"plt.matshow(df.corr())\nplt.show()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"image/png":"c542bd43eeed936207f5f44fbe75d67d9bdd4247","text/plain":"<Figure size 504x504 with 1 Axes>"},"metadata":{"image/png":{"height":424,"width":418},"needs_background":"light"}}},"pos":10,"start":1598011797104,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011799252,"exec_count":6,"id":"8a5c11","input":"X = df[['x1', 'x2', 'x3']]\ny = df[['y']]","kernel":"python3","no_halt":true,"pos":12,"start":1598011799248,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011799290,"exec_count":7,"id":"c8a4ca","input":"linear_regressor = LinearRegression()\nlinear_regressor.fit(X, y)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"LinearRegression()"},"exec_count":7}},"pos":14,"start":1598011799260,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011799310,"exec_count":8,"id":"b93117","input":"print(linear_regressor.intercept_)\nprint(linear_regressor.coef_)\n","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[71.35781377]\n[[ 35.33598059  -2.46524515 796.89909406]]\n"}},"pos":16,"start":1598011799301,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011799351,"exec_count":9,"id":"36ff7f","input":"linear_regressor.score(X, y)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"0.8944538590150857"},"exec_count":9}},"pos":18,"start":1598011799317,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011799389,"exec_count":10,"id":"0d01c9","input":"y_pred = linear_regressor.predict(X)","kernel":"python3","no_halt":true,"pos":20,"start":1598011799384,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011800536,"exec_count":11,"id":"4ae477","input":"plt.scatter(X[['x3']], y, s=1, color='blue')\nplt.scatter(X[['x3']], y_pred, s=1, color='red')\nplt.show()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"image/png":"25bab37fcf5033207482aae611c71aedf27a7cb6","text/plain":"<Figure size 864x504 with 1 Axes>"},"metadata":{"image/png":{"height":411,"width":718},"needs_background":"light"}}},"pos":22,"start":1598011799410,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011800637,"exec_count":12,"id":"c4aa18","input":"print(linear_regressor.predict([[.5, .5, .5]]))","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[[486.24272852]]\n"}},"pos":24,"start":1598011800628,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011800665,"exec_count":13,"id":"d6b56a","input":"print(linear_regressor.predict([[.1, -.2, -.4]]))","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[[-243.37517677]]\n"}},"pos":26,"start":1598011800648,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011800703,"exec_count":14,"id":"013515","input":"# load data into a dataframe and describe it\n\n# create separate 'X' and 'y' dataframes of the data\n\n# perform linear regression\n\n# print the x coefficients, the y-intercept, and the R^2 score\n\n# print a y prediction for the X value given: x1 = .3\n","kernel":"python3","no_halt":true,"pos":31,"start":1598011800674,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011800717,"exec_count":15,"id":"a87737","input":"# load data into a dataframe and describe it\n\n# create separate 'X' and 'y' dataframes of the data\n\n# perform linear regression\n\n# print the x coefficients, the y-intercept, and the R^2 score\n\n# print a y prediction for the X values given: x1 = -.1, x2 = .4, x3 =.1\n","kernel":"python3","no_halt":true,"pos":34,"start":1598011800713,"state":"done","type":"cell"}
{"cell_type":"code","end":1598011800753,"exec_count":16,"id":"342aa3","input":"# load data into a dataframe and describe it\n\n# create separate 'X' and 'y' dataframes of the data\n\n# perform linear regression\n\n# print the x coefficients, the y-intercept, and the R^2 score\n\n# print a y prediction for the X values given: x1 = -.5, x2 = .3, x3 = .2, x4 = -.2, x5 = 0","kernel":"python3","no_halt":true,"pos":37,"start":1598011800743,"state":"done","type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"05d6d3","input":"In the Exercise 3 space below, load data file **hw1ex3.csv** at the same location as **data.csv** above, practice the same techniques above to load the data, display samples and statistics of the data, perform a linear regression of y on x values, print the coefficients and $R^2$ score, and make the requested prediction.","pos":36,"state":"done","type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"1499f8","input":"In the Exercise 2 space below, load data file **hw1ex2.csv** at the same location as **data.csv** above, practice the same techniques above to load the data, display samples and statistics of the data, perform a linear regression of y on x values, print the coefficients and $R^2$ score, and make the requested prediction.","pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"45c0c8","input":"Each column is perfectly correlated with itself, showing yellow in the correlation matrix above.  Additionally, we note that columns 3 and 4 (\"x3\" and \"y\", respectively) are highly correlated with each other.  This doesn't mean that other features aren't helpful for building a model, but it does mean that we expect \"x3\" to be more important for predicting \"y\".\n\nWe can create our input features dataframe and our output responses data frame by creating new named view of these labeled column slices.\n","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"c787b2","input":"In the Exercise 1 space below, load data file **hw1ex1.csv** at the same location as **data.csv** above, practice the same techniques above to load the data, display samples and statistics of the data, perform a linear regression of y on x values, print the coefficients and $R^2$ score, and make the requested prediction.","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0c3298","input":"### Exercise 3","pos":35,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"172e79","input":"To make a prediction for an unknown value, one can also use the \"predict\" function.\nFor example, let's see what would be predicted as a y value when all x values are set to 0.5:","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2464bd","input":"### Exercise 2","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2ea664","input":"Thus, our linear regression would predict a y value of 486.24272852 at [x1, x2, x3] = [.5, .5, .5].  \nWhen [x1, x2, x3] = [.1, -.2, -.4], y is predicted to be -243.37517677:","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"344fc6","input":"Our first step is to read data from a [comma-separated values (CSV) file](https://en.wikipedia.org/wiki/Comma-separated_values) named \"`data.csv`\".  First, we will form a [Uniform Resource Identifier (URI)](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier), a string of characters that unambiguously identifies the location of this CSV file resource.  Then, we will load the CSV data into a `pandas` dataframe \"`df`\" like this:","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4fbc9c","input":"Often, the amount of data is large and we wish to look at 5 random samples like this:","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"527cb2","input":"Not bad!  We can also use our model to see the values predicted from our original inputs: ","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"55076a","input":"We begin by importing necessary definitions into our Python environment.  You will not need to re-import these for your exercises below.  Each import statement adds useful _libraries_ or parts thereof to our environment:\n* **numpy** is a scientific computing library which includes fast, efficient, multidimensional arrays (i.e. tables) for our data\n* **pandas** builds on numpy to give us efficient data structures (e.g. dataframes) and data analysis tools which are fundamental to data science <!-- * **pandas_profiling** adds tools for analyzing and helping us better understand our data.-->\n* **matplotlib** is a 2D plotting library for scientific visualization\n* **sklearn** provides a variety of regression, classification, and machine learning algorithms for building models of our data\n\nThese imports need only occur once before their use, and should not be copied and repeated below.  To start the notebook fresh and rerun the cells of your notebook, \"Restart and run all...\" (using the button or Kernel menu item).","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5bd8aa","input":"Note that \"std\", the standard deviation, means that if the distribution is a normal (a.k.a. Gaussian)\nthen 68%, 95%, and 99.7% of the distribution is within 1, 2, and 3 standard deviations of the mean, respectively.\nIf the distribution is normal, this doesn't apply, but standard deviation $\\sigma$ squared is the variance $\\sigma^2$,\na measure of how much the data varies from the mean.\n\nTwo variables are [correlated](https://en.wikipedia.org/wiki/Correlation_and_dependence) to the extent that they are linearly related.  We can see correlations between the data using pandas and matplotlib:","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7056ce","input":"Next, we build a linear regression model using our X features and y response. This involves creating a LinearRegressor object (from sk-learn), and using it with this data to compute a linear \"model\" of the relationship between X and y:","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7a8a17","input":"### Exercise 1","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7edab7","input":"## Exercises","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"80d886","input":"For these exercises, you will both add on to this Jupyter Notebook to show your work after each corresponding code block comment below. ","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8a1c3b","input":"Knowing from before that feature \"x3\" has the highest correlation with \"y\", we can also scatterplot the results, showing the predicted values as (x3,y_pred) points in red on top of the original (x3,y) points in blue. ","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8a6001","input":"We can see that the header column \"id\" is identical to the dataframe line numbering. Each line is an Our inputs (a.k.a. \"predictors\", \"features\", and \"independent variables\") are columns \"x1\", \"x2\", and \"x3\", whereas our output (a.k.a. \"response\", \"outcome\", \"label\", and \"dependent variable\") is column \"y\".\n\nOne can get a brief statistical description of our dataframe named \"data\" using the describe function as follows:","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a77cb3","input":"We can access the regression model through its \"intercept_\" and \"coef_\" values as shown below.  From these, we can see that we have a y-intercept (y value at x=0) of 71.35781377, and x1, x2, and x3 coefficients of 35.33598059, -2.46524515, and 796.89909406, respectively.  Thus, our linear model is:\n\ny = 71.35781377 + 35.33598059 * x1 + -2.46524515 * x2 + 796.89909406 * x3","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a83bcf","input":"We can see the [$R^2$ score](https://en.wikipedia.org/wiki/Coefficient_of_determination), i.e. the proportion of the variance in the output that is predictable from the inputs of our model prediction, as follows:","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b544bb","input":"# Simple Linear Regression Walkthrough\n\nIn this notebook, we will walk through a simple linear regression exercise.  Your homework assignment will be to perform the same steps with different datasets adding your work into this Jupyter notebook in the designated areas and answering questions about your work in a corresponding Moodle quiz.  \n\nSide note: If you would like to see how these [Markdown format](https://daringfireball.net/projects/markdown/syntax) sections are written, I recommend [Adam Pritchard's Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet).  For any of these text sections, click on them and Edit to see the underlying syntax (i.e. structure, form) that generates the formatting you see.  Then press Control-Enter to interpret the syntax and see how the Markdown displays.\n","pos":0,"state":"done","type":"cell"}
{"id":0,"time":1598121099676,"type":"user"}
{"last_load":1597979373486,"type":"file"}