{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80412672},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"31993f","input":"","pos":9,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"44de74","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"072d10","input":"# Create and print a multiline string.\n\n\n\n# Print the following string like it would appear as a title with each word capitatized.\n# (Python ignores the convention of not capitalizing words \"or\" and \"and\".)\ns = \"the hobbit, or there and back again\"\n\n\n\n# Print the following string with the '=' characters stripped from beginning and end.\ns = '===Pesky Equal Signs==='\n\n\n\n# Print the index where the string 'find' is first found in the following string.\ns = 'After you have finished your experiment, be sure to share all of your findings.'\n\n\n\n# Print the following string with every occurrence of lowercase \"th\" replaced with \"f\".\ns = 'This is just a pithy sentence with three replacements.'\n\n\n\n# Print the list created by taking your multiline string above and splitting it by lines.\n\n\n\n# Print the single string \"Hen3ry\" created by concatenating \"Hen\", the value in variable \"tres\" converted to a string, and \"ry\".\ntres = 3\n\n\n\n# Compute and print the Golden Ratio (https://en.wikipedia.org/wiki/Golden_ratio) to six decimal places using a format string.\n\n\n","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"3c3f90","input":"start_text = 'A. 32 Course Units'\nend_text = 'Individualized Study courses and Internships may not be used to fulfill Curricular Goals.'\n# Uncomment the next line to disable the warning once you have imported urllib3:\n# urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n","pos":21,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"587460","input":"import math  # allows you to use definitions of package math by preceding their names with \"math.\"\nprint(math.pi)\n\nfrom math import sqrt, isclose  # allows you to use sqrt, isclose of package math without needing to preceded it with \"math.\"\nx = sqrt(2) ** 2\nprint(x, x == 2, isclose(x, 2))\n\nimport math as m  # allows you to use definitions of package math by preceding their names with \"m.\"\nprint(m.sin(m.pi))\n\n# from math import *  <-- WARNING: This allows you to use all definitions of package math without prefix.\n#   This is generally discouraged, because it can have unintended consequences if package math has a\n#   function you didn't consider or know about that overrides a function you had of the same name.","output":{"0":{"name":"stdout","output_type":"stream","text":"3.141592653589793\n2.0000000000000004 False True\n1.2246467991473532e-16\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"06cd39","input":"# Print the following string in all UPPERCASE.\ns = 'This is a test sentence.'\n\n\n\n# Print the following string with the whitespace stripped from beginning and end.\ns = '       This has both leading and trailing whitespace.       '\n\n\n\n# Print the string 'Center me.' in the center of 40 characters (other characters being filled as spaces).\n\n\n\n# Print the list entries of the following string list that begin with 'ab'.  Hint: Use a simple list comprehension.\nl = [\"{0:b}\".format(i).zfill(4).replace('0','a').replace('1','b') for i in range(2 ** 4)]\n\n\n\n# Print the following phone number with dashes removed (replaced with empty strings).\ns = '800-555-1212'\n\n\n\n# Print the string created by joining list \"l\" above with commas between entries.\n\n\n\n# Use a format string to print \"The answer to life, the universe, and everything is 42.\" where the 42 is inserted from variable \"answer\".\nanswer = 42\n\n","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"d4bd13","input":"# Print the following string in all lowercase.\ns = \"WHY ARE CAPITAL LETTERS ASSOCIATED WITH YELLING?\"\n\n\n\n# Now, in addition, print the capitalized version of the lowercase string so that it appears like a properly capilatized sentence.\n\n\n\n# Print the square root of 2 right-justified in 20 characters (the rest of the characters being spaces).\n\n\n\n# Print the list of entries of the following string list that end with 'bb'.  Hint: Use a simple list comprehension.\nl = [\"{0:b}\".format(i).zfill(4).replace('0','a').replace('1','b') for i in range(2 ** 4)]\n\n\n\n# Print the list of words you get from the following sentence by splitting on the space character.\ns = \"This is a sentence with seven words.\"\n\n\n\n# Print a single multiline string created from the following list of strings with one string per line.\nl = ['This should be line 1.', 'This should be line 2.', 'This should be line 3.']\n\n\n\n# Use the format string to print the following two lines with _____ replaced be the three entries of the list defined below.\n# Amongst those interviewed were _____, ______ and _____. (without Oxford comma)\n# Amongst those interviewed were _____, ______, and _____. (with Oxford comma)\nentries = ['Merle Haggard’s two ex-wives', 'Kris Krisofferson', 'Robert Duvall']\n# Optional: Using *entries as a parameter to the format function causes each list entry to be interpreted as a separate parameter to format.\n\n","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"09bb92","input":"text = '''Academic resources\nOffice\tPhone Number\tDescription\nAcademic Advising\t717-337-6579\tGeneral advising questions, disability accommodation questions\nRegistrar’s Office\t717-337-6240\tAP/IB credit, transfer credit, Peoplesoft/Student Center questions, Registration Holds\nMusselman Library\t717-337-7024\tResearch Assistance, Interlibrary Loans, Course Reserves for Students\nOrientation, dashboard and housing resources\nOffice\tPhone Number\tDescription\nOffice of Residential and First Year Programs\t717-337-6901\tTrouble with log-ins, Dashboard question, Orientation questions, Housing questions/requests\nFinancial resources\nOffice\tPhone Number\tDescription\nFinancial Services\t717-337-6220\tStudent Account, Payment Plans, Making a payment\nFinancial Aid\t717-337-6611\tFinancial Aid, Academic Merit Scholarships, Talent Scholarships\nTechnology resources\nOffice\tPhone Number\tDescription\nInformation Technology Services/G-Tech\t717-337-7000\tAssistance with personal computers, Connecting to College Network, Accessing e-mail, general trouble shooting assistance\nHealth, mental health and well being resources\nOffice\tPhone Number\tDescription\nHealth Services\t717-337-6970\tAssessment and Treatment of Acute Illness, Management of Stable and Chronic Illness, Stress Management, Weight Management, Well Care visits, In-House Lab, Health Education\nCounseling Services\t717-337-6960\tFree confidential counseling services, emergency services, psychiatric services, self-help resources, skills workshops,\nCampus Recreation\t717-337-6428\tIntramurals and Recreational Sports, Club Sports, Fitness Classes\nSafety resources\nOffice\tPhone Number\tDescription\nDepartment of Public Safety\t717-337-6911\tSafety Escorts, Crime Prevention Programming, Fire and Intrusion Alarm Monitoring and Response, Patrol of Campus, Lost and Found, Courtesy Vehicle Jump-Starts, Response to Medical and Other Emergencies\nStudent Rights and Responsibilities\t717-337-6907\tReporting Incidents of Bias, Bias Education and Advisory Council, Addressing violations of the code of conduct\nOffice of Sexual Respect and Title IX\t717-337-6900\tViolence Prevention, Title IX Response, Sexual Misconduct Response\nSocial and outside of the classroom resources\nOffice\tPhone Number\tDescription\nOffice of Student Activities and Greek Life\t717-337-6304\tClubs and Organizations, Social Programming, Greek Life- for second year students, Student Senate\nOffice of Multicultural Engagement\t717-337-6311\tFirst-Generation Student Support, Support for Affinity Groups, Social Programming, Awareness and Heritage Month Programming, Mentoring, Mosaic Cupboard, Academic Success Workshops\nGarthwait Leadership Center\t717-337-8444\tLeadership Development for students\nEisenhower Institute\t717-337-6685\tPrograms in Environmental leadership, Civil Rights, Women and Leadership, etc.\nCenter for Public Service\t717-337-6490\tCommunity Service and Volunteer Opportunities, Immersion Projects,\nWomen’s and LGBTQA+Life Resource Center\t717-337-6991\tSafe Space to study, hang out, and relax, Meeting area for clubs and organizations, Library, Programming\nCareer Engagement\t717-337-6616\tOn Campus jobs, Career Exploration Programs, Internships, Externships, Shadow Programs\nStudy Abroad Programs\t717-337-6866\tStudy Abroad Programs'''\n\n","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"f39148","input":"import re\n\n# Define email regular expression\nemail_regex = re.compile('[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+')\n\ns = 'This example sentence contains email addresses for Gettysburg College Admissions <admiss@gettysburg.edu>, the Gettysburg College IT Helpdesk <trouble@gettysburg.edu>, and Faik E. Mayl <devnull@nospam.org>.'\n\n# We can use our email regular expression to find all emails in this sentence and put them into a list:\n\nall_emails = email_regex.findall(s)\nprint(all_emails)\n\n# We can use the patterns to make new strings with substitutions for matched patterns:\n\ns_no_emails = email_regex.sub('email@omitted.now', s)\nprint(s_no_emails)\n\n# Parentheses can be used in a regular expression to define \"groups\", allowing us to get group chunks of the patterns matched as tuples:\nemail_regex_with_username_domain_groups = re.compile('([a-zA-Z0-9_.+-]+)@([a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)')\nprint(email_regex_with_username_domain_groups.findall(s))\n\n# We can also name our groups with \"(?P<name> )\" syntax and get a list of dictionaries we can use for flexible access to our matched information.\nemail_regex_with_named_groups = re.compile('(?P<username>[a-zA-Z0-9_.+-]+)@(?P<domain>[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)')\nemail_dicts = [match.groupdict() for match in email_regex_with_named_groups.finditer(s)]\nprint(email_dicts)\nprint('Here comes trouble!', email_dicts[1]['username'])  # Get the username of the second match (index 1)","output":{"0":{"name":"stdout","output_type":"stream","text":"['admiss@gettysburg.edu', 'trouble@gettysburg.edu', 'devnull@nospam.org']\nThis example sentence contains email addresses for Gettysburg College Admissions <email@omitted.now>, the Gettysburg College IT Helpdesk <email@omitted.now>, and Faik E. Mayl <email@omitted.now>.\n[('admiss', 'gettysburg.edu'), ('trouble', 'gettysburg.edu'), ('devnull', 'nospam.org')]\n[{'username': 'admiss', 'domain': 'gettysburg.edu'}, {'username': 'trouble', 'domain': 'gettysburg.edu'}, {'username': 'devnull', 'domain': 'nospam.org'}]\nHere comes trouble! trouble\n"}},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"0b923f","input":"(3) Follow the instructions of each comment below.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"0f95b0","input":"A Python _module_ is a file that contains Python code and thus can include function definitions one may want to import and use.  A Python _package_ is a collection of Python _modules_ together with an ```__init__.py``` file that distinguishes which definitions in those modules are visible to those who import the package.  There are a few forms of imports that you will want to become familiar with:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"24352c","input":"# Homework","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"41399c","input":"(end of homework)","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"41b240","input":"## Python Modules and Packages","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"517eac","input":"(2) Do the following:\n* Import package \"[urllib3](https://urllib3.readthedocs.io/en/latest/user-guide.html)\", the most popular Python package for making HTTP requests to interact with websites.\n* Assign variable \"http\" to be a new \"PoolManager()\" object from package \"urllib3\".\n* Assign variable \"url\" to be the string '[http://cs.gettysburg.edu/~tneller/ds256/data/test.html](http://cs.gettysburg.edu/~tneller/ds256/data/test.html)'.\n* Execute \"response = http.request('GET', url)\" to get the web page source from that URL and store it in variable \"resp\".\n* Execute \"print(response.data.decode('utf-8'))\" to print the decoded downloaded web page source.\n\nThis ability will be foundational for \"[web scraping](https://en.wikipedia.org/wiki/Web_scraping)\" data from web pages and will be used in exercise 4 below.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"5442e9","input":"# In Class\n\nPerform the following exercises together:\n\n## Modules and Packages\n\n* From package \"random\" import functions \"seed\" and \"gauss\".\n* Set the seed to 0 with \"seed(0)\".\n* Execute the help function for \"gauss\".\n* Create a list \"data\" with 1000 Gaussian random numbers with mean 2 and standard deviation 1.\n* Import package \"statistics\".\n* Use help or online documentation to help you compute and print the deciles of \"data\". (Your first value should be ~0.777.)\n\n_Note: Looking up how to do something in a programming language is the norm of a programmer's experience.  Get comfortable using both help() and web searches._","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"5e1518","input":"## String Operations\n","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"654d26","input":"## Regular Expressions\n\nBelow is a string \"text\" assigned a multiline string copy-pasted from https://www.gettysburg.edu/faculty/faculty-resource-guide.\n* All phone numbers within are of the form ###-###-####, where # is a digit.  Form a Python regular expression to describe this pattern.\n* Compile and use this regular expression to find all phone numbers in \"text\" and create a list of them.\n* Print the list of phone numbers in \"text\".","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"666217","input":"# Python Modules, Strings, and Data Science Packages\n\nLearning Objectives:\n* Students will learn various means of importing Python modules and functions.\n* Students will learn intermediate String operations and be introduced to regular expression pattern matching.\n* Students will overview the Python packages used most commonly by Data Scientists.\n\nReadings before class:\n\n* Jake VanderPlas.  [A Whirlwind Tour of Python](https://github.com/jakevdp/WhirlwindTourOfPython) sections:\n  * [13 - Modules and Packages](https://github.com/jakevdp/WhirlwindTourOfPython/blob/master/13-Modules-and-Packages.ipynb)\n  * [14 - String Manipulation and Regular Expressions](https://github.com/jakevdp/WhirlwindTourOfPython/blob/master/14-Strings-and-Regular-Expressions.ipynb) _We could spend multiple classes on regular expressions alone, but deep coverage is beyond the scope of this course.  However, regular expressions are very useful, so getting practice with Python regular expressions would be a good personal study goal beyond this course.  Reference resources for regular expressions are listed below._\n  * [15 - A Preview of Data Science Tools](https://github.com/jakevdp/WhirlwindTourOfPython/blob/master/15-Preview-of-Data-Science-Tools.ipynb) _Skim this chapter.  We will cover these in greater depth in the weeks to come._\n* Allen B. Downey.  [Think Python 2e](https://greenteapress.com/wp/think-python-2e/):\n  * Review [Chapter 8  Strings](http://greenteapress.com/thinkpython2/html/thinkpython2009.html)\n\nOptional reference:\n* W3School's [RegEx (Regular Expression) tutorial](https://www.w3schools.com/python/python_regex.asp)\n* Al Sweigart's [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/)\n  * [Chapter 6 - Manipulating Strings](https://automatetheboringstuff.com/2e/chapter6/)\n  * [Chapter 7 - Pattern Matching with Regular Expressions](https://automatetheboringstuff.com/2e/chapter7/)\n* A.M. Kuchling's [Regular Expression HOWTO](https://docs.python.org/3/howto/regex.html)\n\nActivities before class:\n* Read below up to (but not including) the section marked Homework.  **Be sure to do the pre-class exercises as you do your reading on strings and regular expressions.** You are encouraged to add code blocks and play with the forms to gain understanding and comfort with them.\n\nIn class:\n* We will work together in class on the section labeled \"In Class\"\n\nHomework after class:\n* Complete the section labeled \"Homework\" below before the next class when it will be collected.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"9bfe53","input":"## String Manipulation\n\nMost string operations are straight-forward and well illustrated in the assigned VanderPlas reading. Here, in-class, and in the homework, you will exercise these operations.\n\n**To-do: Complete the instructions of each comment below.**","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"b7a905","input":"(1) Complete any in-class exercises you did not complete in class.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"d00514","input":"## Regular Expressions\n\nRegular expressions are a grammar for flexibly specifying _patterns_ to be matched in character sequences.  One common application is to extract email addresses from text.  Here is a complex regular expression from [http://emailregex.com/](http://emailregex.com/) to describe the form of an email address:\n\n```[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+```\n\nLet's take this apart. First consider the first portion within square braces:\n\n```[a-zA-Z0-9_.+-]```\n\nSquare braces are used to define a set of characters.  The range 'a-z' means what you would expect: the inclusion of all lowercase Latin alphabetic characters.\nWe also see all uppercase Latin alphabetic characters, all digits, the underscore, the period, the plus, and the minus.  The \"+\" immediately after the this bracketed character set means \"one or more from the pattern preceding\", in this case, one or more characters from this set of options.  This username specification is followed in the pattern with the single character \"@\".  While the plus character is allowed in the username, we can see that it isn't allowed in the period-separated portions after the \"@\".\n\nLet us now define and put this regular expression to work in Python with package \"re\":\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"e721fe","input":"(4) For this exercise, you will make use of exercise 2 and scrape some simple data from Gettysburg College's page on courses satisfying curricular requirements: [https://www.gettysburg.edu/offices/registrar/courses-fulfilling-the-gettysburg-curriculum](https://www.gettysburg.edu/offices/registrar/courses-fulfilling-the-gettysburg-curriculum).\n* Make an HTTP GET request of URL 'https://www.gettysburg.edu/offices/registrar/courses-fulfilling-the-gettysburg-curriculum'\n* Instead of printing the decoded data, assign it to string ```s```.\n* There is a lot of page metadata that could generate false-matches for seeking course numbers.  We know that what we want is between the strings defined below as \"start_text\" and \"end_text\".  Find the indices of ```s``` where each of these are found. Then reassign ```s``` to be the substring of s from the start index to the end index.\n* Courses seem to follow a pattern of 3 digits followed optional by a dash and one more digit.  Compile regular expression \\D(\\d{3}(?:-\\d)?)\\D' and assign the compiled regular expression to variable course_num_regex.  (Note: \\D means any non-digit, \\d means any digit, ? means what precedes it is optional, and ?: at the beginning of the parenthesized group means ignore the group.)\n* Perform a ```findall``` of this regular expression on the ```s``` to get the list of the page's course numbers and then print that list.","pos":20,"type":"cell"}
{"id":0,"time":1600407588889,"type":"user"}
{"last_load":1600407580764,"type":"file"}